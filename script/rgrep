#!/bin/sh

# recursive search for a POSIX or perl regexp pattern 
# in files and sub-directories                         
# by Andrew Eigus <aei@riga.ahlers.com> (c) 2010

PATH=/bin:/usr/bin:/usr/local/bin


function usage() {
  cat 1>&2 <<- EOB
$(basename "$0") - perform recursive expression search (perl/POSIX syntax)
     
usage: $(basename "$0") [-p] [-g] [-n] <directory> <string> [args]
  <directory>	directory to start recursive search from
  <string>	search string (perl/POSIX regex compatible)
  [args]	additional arguments for 'find' (when -g switch not present)
                for example, use the following command:
                $(basename "$0") . "myclass("  "-regex .*\.\(c\|cc\|h\|js\)" 
                to search for files in the current directory tree
                with extensions: .c, .cc, .h and .js
  -p		use perl regex instead of POSIX regex
  -g		use GNU grep with recursive option
  -n		disable colours
EOB
  exit 1
}

# to find multiple files
#find /opt/chromium/src -wholename '*/.svn' -prune -o -type f -regex ".*\.\(c\|cc\|h\|js\)"

export GREP_COLORS='ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36'
colors='always'


LNCOL=$(tput setaf 5)
FNCOL=$(tput setaf 5)
TOCOL=$(tput setaf 3)
NOCOL=$(tput op)

while getopts "pgnh?" OPTION
do
     case $OPTION in
	 n)
	     # disable colours
	     colors='none'
	     unset LNCOL FNCOL TOCOL NOCOL
	     shift $((OPTIND-1)); OPTIND=1
	     ;;
         p)
	     # use perl regex
	     add_grep_args='P'
	     shift $((OPTIND-1)); OPTIND=1
	     ;;
	 g)
	     # use gnu grep with recursive option instead of find and grep
	     use_gnu_recursive=1
	     shift $((OPTIND-1)); OPTIND=1
	     ;;
         h|?)
             usage
             exit
             ;;
     esac
done

if [ -z "$1" ]; then
  usage "$0"
fi

if [ -z "$2" ]; then
  usage "$0"
fi

startdirectory=$1
if [ -f "$1" ]; then
  add_find_args="-path $startdirectory"
elif [ -d "$1" ]; then
  startdirectory=$1
else
  echo -e "\nInvalid search directory specified: \"$1\"\n\n"
  exit 1
fi

if [ ! -z "$4" ]; then
  add_find_args="$4 $add_find_args"                                                
fi

if [ ! -z $use_gnu_recursive ]; then 
  # verify whether system grep is really GNU grep
  if [ -z "$(grep --version | grep 'GNU grep')" ]; then
    unset $use_gnu_recursive
    echo "no gnu recursive capability"
  fi
fi


###

set -e

search=$2

if [ ! -t 1 ]; then
  # write full command info into redirected stream
  echo "--- Date:" $(date)
  echo "--- Command with arguments:"
  echo $0 $@
  echo -e "\n\n"
fi

echo -e "\nSearching for \"$TOCOL$search$NOCOL\"\n" \
  "in "$TOCOL$startdirectory$NOCOL"\n"

# highlight results our way
highlight_results="sed -e s/^\([^:]\+\):\([0-9]\+\):\(.*\)/$FNCOL\1$NOCOL:$LNCOL\2$NOCOL:\3/g"
if [ -z $use_gnu_recursive ]; then
  find "$startdirectory" $add_find_args -type f -exec \
    grep -HnI$add_grep_args "$search" --colour=$colors {} \; \
    | $highlight_results
else
  grep -HnIR$add_grep_args --color=$colors "$search" "$startdirectory" \
    | $highlight_results
fi
